{"version":3,"sources":["components/Itemscomponents.js","containers/App.js","serviceWorker.js","index.js"],"names":["Itemcomponents","props","react_default","a","createElement","className","onSubmit","event","submit","value","inputValue","onChange","change","type","message","items","length","map","item","index","key","itemsHolder","e","onEditInputChangeHandeler","target","onClick","updateItem","click","disabled","edititems","colSpan","clearall","App","state","buyitems","buyitemsEditValueHolder","inputValues","addItems","preventDefault","newItems","_this","filterItems","filter","console","log","setState","concat","Object","toConsumableArray","isEditStatus","addChangeHnadler","deleteItem","clearAll","editItems","editstatus","onEditInputChange","buyitemsEditValueHolders","updateItemHandeler","JSON","parse","localStorage","getItem","forEach","this","nextProps","nextState","setItem","stringify","components_Itemscomponents","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1ad33c0b.chunk.js","sourcesContent":["import React from 'react';\nimport './Itemscomponents.css';\n\nconst Itemcomponents = (props) => {\n    return (\n        <div className=\"container\">\n            <form className=\"form-inline margin\" onSubmit={(event) => props.submit(event)}>\n                <div className=\"form-group\">\n                    <label>Add item:</label>\n                    <input value={props.inputValue} onChange={props.change} type=\"text\" className=\"form-control\" />\n                </div>\n\n                <button className=\"btn btn-primary\">Add item</button>\n            </form>\n            {\n                (props.message !== '' || props.items.length === 0) && <p className=\"message text-danger\">{props.message}</p>\n            }\n            {\n                props.items.length > 0 &&\n                <table className=\"table table-striped\">\n                    <thead>\n                        <tr>\n                            <th>Id</th>\n                            <th>Items</th>\n                            <th>Action</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {\n                            props.items.map((item, index) => {\n                                return (\n                                    <tr key={index}>\n                                        <td>{index}</td>\n                                        {!item['editstatus'] ?\n                                            <td>{item['value']}</td> :\n                                            <td>\n                                                <input type=\"text\" value={props.itemsHolder[index]} onChange={(e) => props.onEditInputChangeHandeler(index, e.target.value)} />\n                                                <button onClick={(e) => props.updateItem(index)} type=\"button\" className=\"btn btn-secondary btn-sm\">Update</button>\n                                            </td>\n                                            // <td><input type=\"text\" value={item['value']} onChange={(e) => props.onEditInputChangeHandeler(index, e.target.value)} /></td>\n                                        }\n                                        <td><button onClick={(e) => props.click(item)} disabled={item['editstatus']} type=\"button\" className=\"btn btn-danger btn-sm\">Delete</button>\n                                            <button onClick={(e) => props.edititems(index)} type=\"button\" className=\"btn btn-primary btn-sm\">Edit</button>\n                                        </td>\n                                    </tr>\n                                )\n                            })\n                        }\n\n                    </tbody>\n                    <tfoot>\n                        <tr>\n                            <td colSpan=\"2\">&nbsp;</td>\n                            <td><button type=\"button\" onClick={(e) => props.clearall()} className=\"btn btn-outline-danger\"> Clear All</button></td>\n                        </tr>\n                    </tfoot>\n                </table>\n            }\n\n        </div>\n    )\n\n}\n\nexport default Itemcomponents;","import React, { Component } from 'react';\nimport './App.css';\nimport Itemscomponents from '../components/Itemscomponents'\n\nclass App extends Component {\n  state = {\n    buyitems: [],\n    buyitemsEditValueHolder: [],\n    inputValues: '',\n    message: ''\n\n  }\n\n\n  componentWillMount() {\n    console.log('componentWillMount');\n    let items = JSON.parse(localStorage.getItem('buyitems'));\n    if (items) {\n      let itemsHolder = [];\n      items.forEach(function (item, index) {\n        itemsHolder[index] = item.value;\n      });\n      localStorage.getItem('buyitems') && this.setState({\n        buyitems: items,\n        buyitemsEditValueHolder: itemsHolder\n      })\n    }\n\n  }\n\n  addItems = (event) => {\n    event.preventDefault();\n    let newItems = this.state.inputValues;\n    let items = this.state.buyitems;\n    let filterItems = items.filter(function (item) {\n      return item.value === newItems;\n    });\n    console.log(filterItems);\n\n\n    if (newItems !== '' && filterItems.length === 0) {\n      this.setState({\n        buyitems: [...this.state.buyitems, {\n          value: newItems,\n          isEditStatus: false\n        }],\n        inputValues: '',\n        message: ''\n      })\n    } else {\n      if (filterItems.length) {\n        this.setState({\n          message: \"This item is already on the list\"\n        })\n      }\n    }\n  }\n\n  addChangeHnadler = (event) => {\n    this.setState({\n      inputValues: event.target.value\n    })\n\n  }\n  deleteItem = (item) => {\n\n    const newItems = this.state.buyitems.filter(items => {\n      return items !== item;\n    })\n    this.setState({\n      buyitems: [...newItems]\n    })\n    if (newItems.length === 0) {\n      this.setState({\n        message: 'There is no item on the list'\n      })\n    }\n\n  }\n\n  clearAll = () => {\n    this.setState({\n      buyitems: [],\n      message: 'There is no item on the list'\n    })\n  }\n\n  editItems = (index) => {\n    console.log('editing index: ' + index);\n    let items = this.state.buyitems;\n    if (items[index]) {\n      if (items[index].editstatus) {\n        items[index].editstatus = false;\n        this.setState({\n          message: ''\n        });\n      } else {\n        items[index].editstatus = true;\n        this.onEditInputChange(index, items[index].value);\n      }\n      this.setState({\n        buyitems: items\n      });\n    }\n  }\n\n\n\n  onEditInputChange = (index, value) => {\n    console.log('updating index: ' + index);\n    let buyitemsEditValueHolders = this.state.buyitemsEditValueHolder;\n    buyitemsEditValueHolders[index] = value;\n    this.setState({\n      buyitemsEditValueHolder: buyitemsEditValueHolders\n    });\n  }\n\n  updateItemHandeler = (index) => {\n    console.log('updating index: ' + index);\n    let items = this.state.buyitems;\n    let buyitemsEditValueHolders = this.state.buyitemsEditValueHolder;\n\n\n    if (items[index] && buyitemsEditValueHolders[index]) {\n      if (items[index].editstatus) {\n        let filterItems = items.filter(item => {\n          return item.value === buyitemsEditValueHolders[index]\n        })\n        if (filterItems.length === 0) {\n          items[index].value = buyitemsEditValueHolders[index];\n          items[index].editstatus = false;\n          this.setState({\n            buyitems: items,\n            message: ''\n          });\n        } else {\n          if (filterItems.length) {\n            this.setState({\n              message: \"This item is already on the list\"\n            })\n          }\n        }\n      }\n    }\n  }\n\n  componentWillUpdate(nextProps, nextState) {\n    console.log('componentWillUpdate');\n    localStorage.setItem('buyitems', JSON.stringify(nextState.buyitems));\n  }\n\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Itemscomponents\n          items={this.state.buyitems}\n          submit={this.addItems}\n          change={this.addChangeHnadler}\n          inputValue={this.state.inputValues}\n          message={this.state.message}\n          click={this.deleteItem}\n          clearall={this.clearAll}\n          editstatus={this.state.isEditStatus}\n          edititems={this.editItems}\n          onEditInputChangeHandeler={this.onEditInputChange}\n          itemsHolder={this.state.buyitemsEditValueHolder}\n          updateItem={this.updateItemHandeler}\n        />\n\n      </div>\n\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}